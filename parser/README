Alunos:
Caio Guedes de Azevedo Mota
Gabriel Victor Carvalho Rocha

DECISÕES DE PROJETO:
A implementação do parser foi feita em cima de interpretações da árvore sintática descrita no manual provido junto aos arquivos do trabalho.
A decisão mais notável de implementação foi no caso do LET, por serem pelo menos 4 casos diferentes. Foi feita uma pequena recursão de
expressões, denominadas 'let_expression' (a partir da linha 355).
Algo parecido foi feito no caso do CASE, para montar uma lista de casos (a partir da linha 227).

CASOS DE TESTES:
good.cl: No arquivo good.cl, buscamos testar todos os casos descritos na árvore da documentação, sendo os casos de:
  > expressão CASE
  > dispatch (@)
  > expressão condicional IF
  > expressão de loop WHILE
  > expressão ISVOID
  > expressões matemáticas e lógicas
Em cada um desses casos, o programa mostra os resultados esperados ao executar no spim.

bad.cl: No arquivo bad.cl, buscamos testar as construções errôneas requisitadas na documentação, cada uma comentada apropriadamente. São elas:
 > Erros em definição de classes (erros de digitação, em identificadores de tipo, falta de chaves, etc.)
 > Erros em features
 > Erros em declarações em expressões let
 > Erros em expressões dentro de blocos de expressão.A
Em cada um desses casos, o parser detecta e mostra o erro, e continua lendo para buscar mais erros.

CORRETUDE:
Acreditamos que o programa está correto, pois foram testados todos os programas disponibilizados em cool/examples e não obtivemos nenhum erro de compilação/execução, gerando as saídas esperadas para cada um deles. 
Além disso, comparamos as saídas do compilador fornecido (coolc) para os arquivos bad.cl e good.cl, certificando assim a corretude do nosso parser.